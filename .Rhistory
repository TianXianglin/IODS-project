install.packages("GGally")
install.packages("ggplot2")
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
learning2014 <- read.table("learning2014.csv", header = TRUE, sep = "\t")
dim(learning2014)
str(learning2014)
# Access the gglot2 library
library(ggplot2)
# initialize plot with data and aesthetic mapping, define the visualization type (points), add a regression line and add a main title:
p1 <- ggplot(learning2014, aes(x = attitude, y = points, col = gender)) + geom_point() + geom_smooth(method = "lm")  + ggtitle("Student's attitude versus exam points")
# draw the plot
p1
install.packages("GGally")
install.packages("ggplot2")
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# draw the plot
p
install.packages("GGally")
# Access the gglot2 library
library(ggplot2)
# initialize plot with data and aesthetic mapping, define the visualization type (points), add a regression line and add a main title:
p2 <- ggplot(learning2014, aes(x = gender, y = points)) + geom_point() + geom_smooth(method = "lm")  + ggtitle("Student's attitude versus exam points")
# draw the plot
p2
# create a regression model with multiple explanatory variables
points_model <- lm(points ~ attitude + stra + surf, data = learning2014)
# print out a summary of the model
summary(points_model)
points_mmodel <- lm(points ~ attitude + stra + surf, data = learning2014)
summary(points_mmodel)
points_model <- lm(points ~ attitude, data = learning2014)
summary(points_model)
# draw diagnostic plots using the plot() function. Choose the plots 1, 2 and 5
par(mfrow = c(2,2))
plot(points_model, which = c(1,2,5))
# Access the gglot2 library
library(ggplot2)
# initialize plot with data and aesthetic mapping, define the visualization type (points), add a regression line and add a main title:
p1 <- ggplot(learning2014, aes(x = attitude, y = points, col = gender)) + geom_point() + geom_smooth(method = "lm")  + ggtitle("Student's attitude versus exam points")
# draw the plot
p1
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# draw the plot
p
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", header = TRUE, sep = "\t")
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", header = TRUE, sep = ",")
dim(learning2014)
str(learning2014)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", header = TRUE, sep = ",")
dim(alc)
str(alc)
colnames(alc)
variables(alc)
ead.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", header = TRUE, sep = ",")
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", header = TRUE, sep = ",")
dim(alc)
colnames(alc)
getwd()
setwd("\\\\ATKK/home/a/awsalo/Documents/GitHub/IODS-project/data")
read.table("student-mat.csv", header = TRUE, sep = ";")
read.table("student-por.csv", header = TRUE, sep = ";")
mat <- read.table("student-mat.csv", header = TRUE, sep = ";")
por <- read.table("student-por.csv", header = TRUE, sep = ";")
dim(mat)
str(mat)
colnames(mat)
head(mat)
dim(por)
str(por)
head(por)
colnames(mat)
colnames(por)
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
colnames(math_por)
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
setwd("\\\\ATKK/home/a/awsalo/Documents/GitHub/IODS-project/data")
mat <- read.table("student-mat.csv", header = TRUE, sep = ";")
por <- read.table("student-por.csv", header = TRUE, sep = ";")
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
getwd()
setwd("\\\\ATKK/home/a/awsalo/Documents/GitHub/IODS-project/data")
math <- read.table("student-mat.csv", header = TRUE, sep = ";")
por <- read.table("student-por.csv", header = TRUE, sep = ";")
dim(math)
str(math)
head(math)
dim(por)
str(por)
head(por)
colnames(math)
colnames(por)
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
colnames(math_por)
glimpse(math_por)
dim(math_por)
str(math_por)
head(math_por)
alc <- select(math_por, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
notjoined_columns <- colnames(math_por)[!colnames(math_por) %in% join_by]
notjoined_columns
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
# For every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# and select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
glimpse(alc)
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc <- mutate(alc, high_use = alc_use > 2)
glimpse(alc)
write.table(alc, file = "alc.csv", sep = ";", col.names = TRUE)
alc <- read.table("alc.csv", header = TRUE, sep = ";")
setwd("\\\\ATKK/home/a/awsalo/Documents/GitHub/IODS-project/data")
?setwd()
setwd("\\\\ATKK/home/a/awsalo/Documents/GitHub/IODS-project")
write.table(alc, file = "alc.csv", sep = ";", col.names = TRUE)
alc <- read.table("alc.csv", header = TRUE, sep = ";")
dim(alc)
colnames(alc)
str(alc)
glimpse(alc)
summarise(alc)
summarise(alc)
glimpse(alc)
summarise(alc)
alc <- read.table("alc.csv", header = TRUE, sep = ";")
alc <- read.table("alc.csv", header = TRUE, sep = ";")
glimpse(alc)
library(dplyr)
alc <- read.table("alc.csv", header = TRUE, sep = ";")
library(dplyr)
alc <- read.table("alc.csv", header = TRUE, sep = ";")
glimpse(alc)
library(dplyr)
alc <- read.table("alc.csv", header = TRUE, sep = ";")
glimpse(alc)
summary(alc)
p1 <- ggplot(alc, aes(x = absences, y = alc, col = gender)) + geom_point() + geom_smooth(method = "lm")  + ggtitle("Absences vs. alcohol consumption")
library(ggplot2)
p1 <- ggplot(alc, aes(x = absences, y = alc, col = gender)) + geom_point() + geom_smooth(method = "lm")  + ggtitle("Absences vs. alcohol consumption")
p1
p1 <- ggplot(alc, aes(x = absences, y = alc, col = sex)) + geom_point() + geom_smooth(method = "lm")  + ggtitle("Absences vs. alcohol consumption")
p1
p1 <- ggplot(alc, aes(x = absences, y = alc_use, col = sex)) + geom_point() + geom_smooth(method = "lm")  + ggtitle("Absences vs. alcohol consumption")
p1
g2 <- ggplot(data = alc, aes(x = alc_use))
g2 + geom_bar() + facet_wrap("sex")
g2 <- ggplot(data = alc, aes(x = alc_use, col = sex)
g2 + geom_bar()
g2 <- ggplot(data = alc, aes(x = alc_use))
g2 + geom_bar() + facet_wrap("sex")
library(tidyr)
install.packages("tidyr")
library(tidyr)
library(dplyr)
library(tidyr)
library(ggplot2)
ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
gather(alc) %>% glimpse(alc)
ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
glimpse(alc)
# use gather() to gather columns into key-value pairs and then glimpse() at the resulting data
gather(alc) %>% glimpse
# draw a bar plot of each variable
gather(alc) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
gather(alc) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
gather(alc$sex) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
ggplot(aes(value)) + geom_bar()
gather(alc) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
ggplot(data = alc, aes(x = alc_use)) + geom_bar()
ggplot(data = alc, aes(x = alc_use, col = sex)) + geom_bar()
par(mfrow = c(2,3))
ggplot(data = alc, aes(x = alc_use)) + geom_bar()
ggplot(data = alc, aes(x = high_use)) + geom_bar()
ggplot(data = alc, aes(x = sex)) + geom_bar()
ggplot(data = alc, aes(x = absences)) + geom_bar()
ggplot(data = alc, aes(x = failures)) + geom_bar()
ggplot(data = alc, aes(x = goout)) + geom_bar()
alc %>% group_by(alc_use) %>% summarise(count = n(), gender = sex)
alc %>% group_by(alc_use, sex) %>% summarise(count = n(), mean_absences = mean(absences), mean_failures = mean(failures), mean_goout = mean(goout))
alc %>% group_by(alc_use) %>% summarise(count = n(), mean_absences = mean(absences), mean_failures = mean(failures), mean_goout = mean(goout))
alc %>% group_by(alc_use, sex) %>% summarise(count = n(), mean_absences = mean(absences), mean_failures = mean(failures), mean_goout = mean(goout))
alc %>% group_by(high_use) %>% summarise(count = n(), mean_absences = mean(absences), mean_failures = mean(failures), mean_goout = mean(goout))
alc %>% group_by(high_use, sex) %>% summarise(count = n(), mean_absences = mean(absences), mean_failures = mean(failures), mean_goout = mean(goout))
g1 <- ggplot(alc, aes(x = high_use, col = sex, y = absences))
g1 + geom_boxplot() + ylab("grade")
g2 <- ggplot(alc, aes(x = high_use, col = sex, y = failures))
g2 + geom_boxplot() + ylab("grade")
g3 <- ggplot(alc, aes(x = high_use, col = sex, y = goout))
g3 + geom_boxplot() + ylab("grade")
g1 <- ggplot(alc, aes(x = high_use, col = sex, y = absences))
g1 + geom_boxplot() + ylab("absences")
g2 <- ggplot(alc, aes(x = high_use, col = sex, y = failures))
g2 + geom_boxplot() + ylab("failures")
g3 <- ggplot(alc, aes(x = high_use, col = sex, y = goout))
g3 + geom_boxplot() + ylab("goout")
g2 <- ggplot(data = alc, aes(x = high_use))
g2 + geom_bar() + facet_wrap("sex")
g2 <- ggplot(data = alc, aes(x = alc_use))
g2 + geom_bar() + facet_wrap("sex")
g2 <- ggplot(data = alc, aes(x = high_use))
g2 + geom_bar() + facet_wrap("sex")
m <- glm(high_use ~ sex + absences + failures + goout, data = alc, family = "binomial")
summary(m)
summary(m)
coef(m)
OR <- coef(m) %>% exp
cbind(OR, CI)
OR <- coef(m) %>% exp
CI <- confint(m) %>% exp
cbind(OR, CI)
m <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
summary(m)
m <- glm(high_use ~ sex + absences + goout, data = alc, family = "binomial")
summary(m)
m1 <- glm(high_use ~ sex + absences + failures + goout, data = alc, family = "binomial")
summary(m1)
OR1 <- coef(m1) %>% exp
CI1 <- confint(m1) %>% exp
cbind(OR1, CI1)
m2 <- glm(high_use ~ sex + absences + goout, data = alc, family = "binomial")
summary(m2)
probabilities <- predict(m2, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = probability>0.5)
select(alc, absences, sex, goout, high_use, probability, prediction) %>% tail(10)
table(high_use = alc$high_use, prediction = alc$prediction)
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
g + geom_point()
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc$high_use, prob = 0)
loss_func(class = alc$high_use, prob = 1)
loss_func(class = alc$high_use, alc$probability)
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
cv$delta[1]
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m2, K = 10)
cv$delta[1]
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m2, K = 10)
cv$delta[1]
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m2, K = 10)
cv$delta[1]
