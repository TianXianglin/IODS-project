install.packages("GGally")
install.packages("ggplot2")
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
learning2014 <- read.table("learning2014.csv", header = TRUE, sep = "\t")
dim(learning2014)
str(learning2014)
# Access the gglot2 library
library(ggplot2)
# initialize plot with data and aesthetic mapping, define the visualization type (points), add a regression line and add a main title:
p1 <- ggplot(learning2014, aes(x = attitude, y = points, col = gender)) + geom_point() + geom_smooth(method = "lm")  + ggtitle("Student's attitude versus exam points")
# draw the plot
p1
install.packages("GGally")
install.packages("ggplot2")
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# draw the plot
p
install.packages("GGally")
# Access the gglot2 library
library(ggplot2)
# initialize plot with data and aesthetic mapping, define the visualization type (points), add a regression line and add a main title:
p2 <- ggplot(learning2014, aes(x = gender, y = points)) + geom_point() + geom_smooth(method = "lm")  + ggtitle("Student's attitude versus exam points")
# draw the plot
p2
# create a regression model with multiple explanatory variables
points_model <- lm(points ~ attitude + stra + surf, data = learning2014)
# print out a summary of the model
summary(points_model)
points_mmodel <- lm(points ~ attitude + stra + surf, data = learning2014)
summary(points_mmodel)
points_model <- lm(points ~ attitude, data = learning2014)
summary(points_model)
# draw diagnostic plots using the plot() function. Choose the plots 1, 2 and 5
par(mfrow = c(2,2))
plot(points_model, which = c(1,2,5))
# Access the gglot2 library
library(ggplot2)
# initialize plot with data and aesthetic mapping, define the visualization type (points), add a regression line and add a main title:
p1 <- ggplot(learning2014, aes(x = attitude, y = points, col = gender)) + geom_point() + geom_smooth(method = "lm")  + ggtitle("Student's attitude versus exam points")
# draw the plot
p1
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# draw the plot
p
# compute odds ratios (OR)
OR1 <- coef(m1) %>% exp
# compute odds ratios (OR)
OR1 <- coef(m1) %>% exp
library(dplyr)
library(tidyr)
library(ggplot2)
library(boot)
library(MASS)
data("Boston")
str(Boston)
glimpse(Boston)
summary(Boston)
pairs(Boston)
cor_matrix<-cor(Boston) %>% round(digits = 2)
cor_matrix
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
library(tidyverse)
install.packages("tidyverse")
library(dplyr)
library(tidyr)
library(ggplot2)
library(boot)
library(MASS)
library(tidyverse)
cor_matrix<-cor(Boston) %>% round(digits = 2)
cor_matrix
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
install.packages("corrplot")
library(corrplot)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
corrplot(cor_matrix, method="circle")
colnames(Boston)
corrplot(cor_matrix, method="circle")
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
# linear discriminant analysis
lda.fit <- lda(crime ~., data = train)
# print the lda.fit object
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
table(correct = correct_classes, predicted = lda.pred$class)
# load the data
data("Boston")
```{r}
# load the data
data("Boston")
# center and standardize variables
boston_scaled2 <- scale(Boston)
# summaries of the scaled variables
summary(boston_scaled2)
# class of the boston_scaled object
class(boston_scaled2)
# change the object to data frame
boston_scaled2 <- as.data.frame(boston_scaled)
# euclidean distance matrix
dist_eu <- dist(Boston)
# look at the summary of the distances
summary(dist_eu)
# euclidean distance matrix
dist_eu <- dist(boston_scaled2)
# look at the summary of the distances
summary(dist_eu)
km <-kmeans(boston_scaled2, centers = 3)
class(boston_scaled2)
boston_scaled2 <- as.data.frame(boston_scaled)
dist_eu <- dist(boston_scaled2)
dist_eu <- dist(boston_scaled)
dist_eu <- dist(boston_scaled2)
km <-kmeans(boston_scaled2, centers = 3)
# euclidean distance matrix
dist_eu <- dist(Boston)
# look at the summary of the distances
summary(dist_eu)
km <-kmeans(Boston, centers = 3)
# euclidean distance matrix
dist_eu <- dist(boston_scaled2)
# look at the summary of the distances
summary(dist_eu)
# k-means clustering
km <-kmeans(boston_scaled2, centers = 3)
# euclidean distance matrix
dist_eu <- dist(Boston)
# look at the summary of the distances
summary(dist_eu)
# k-means clustering
km <-kmeans(Boston, centers = 3)
# plot the Boston dataset with clusters
pairs(Boston[6:10], col = km$cluster)
pairs(Boston, col = km$cluster)
pairs(Boston[6:10], col = km$cluster)
# MASS, ggplot2 and Boston dataset are available
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
pairs(Boston[6:10], col = km$cluster)
km_bonus <-kmeans(Boston, centers = 4)
lda.fit <- lda(km_bonus ~., data = train)
km_bonus
summary(Boston$km_bonus)
bins <- quantile(Boston$km_bonus)
bins
model_predictors <- dplyr::select(train, -crime)
dim(model_predictors)
dim(lda.fit$scaling)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
install.packages("plotly")
library(plotly)
library(plotly)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers')
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = model_predictors)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = crime)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = train$crime)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = train$km)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = Boston$km)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = km)
getwd()
setwd("\\\\ATKK/home/a/awsalo/Documents/GitHub/IODS-project/data")
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
str(hd)
head(hd)
dim(gii)
str(gii)
head(gii)
summary(hd)
colnames(hd)
colnames(gii)
colnames(hd)[1] <- "HDIrank"
colnames(hd)[2] <- "country"
colnames(hd)[3] <- "HDI"
colnames(hd)[4] <- "explife"
colnames(hd)[5] <- "expschool"
colnames(hd)[6] <- "meanschool"
colnames(hd)[7] <- "GNIpercap"
colnames(hd)[8] <- "diffGNIrankHDIrank"
colnames(hd)
colnames(gii)[1] <- "GIIrank"
colnames(gii)[2] <- "country"
colnames(gii)[3] <- "GII"
colnames(gii)[4] <- "matmor"
colnames(gii)[5] <- "teenbirth"
colnames(gii)[6] <- "mpF"
colnames(gii)[7] <- "edu2F"
colnames(gii)[8] <- "edu2M"
colnames(gii)[9] <- "labF"
colnames(gii)[10] <- "labM"
colnames(gii)
edu <- edu2F/edu2M
edu <- gii$edu2F/gii$edu2M
lab <- gii$lab2F/gii$lab2M
colnames(gii)
gii$edu <- edu
gii$lab <- lab
edu <- gii$edu2F/gii$edu2M
lab <- gii$labF/gii$labM
gii$edu <- edu
gii$lab <- lab
colnames(gii)
head(gii)
library(dplyr)
join_by <- c("country")
hdgii <- inner_join(hd, gii, by = join_by, suffix = c(".hd", ".gii"))
human <- inner_join(hd, gii, by = join_by, suffix = c(".hd", ".gii"))
glimpse(human)
human <- inner_join(hd, gii, by = join_by)
glimpse(human)
setwd("\\\\ATKK/home/a/awsalo/Documents/GitHub/IODS-project")
write.table(alc, file = "human.csv", sep = ",", col.names = TRUE)
write.table(human, file = "human.csv", sep = ",", col.names = TRUE)
